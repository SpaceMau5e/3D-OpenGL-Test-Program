//Devin Kaltenbaugh

#include <iostream>
#include <cstdlib>
#include <cmath>
#include <chrono>
#include <windows.h>  
#include <GL/glut.h>  

using namespace std;

GLfloat angleCompass = 0.0f;
int compRot = 0;

GLfloat angleCube = 0.0f;
GLfloat axisRotX = 0.0f;
GLfloat axisRotY = 1.0f;
GLfloat axisRotZ = 0.0f;

GLfloat movXOffset = 0.0f;
GLfloat movYOffset = 0.0f;
GLfloat movZOffset = 0.0f;

GLfloat winWidth = 1200.0f;
GLfloat winHeight = 800.0f;

int refreshMills = 10;
int ticksSince = 0;
int ticksSince_Txt = 0;
int tickAdjust = 6;
int tickAdjust_Txt = 420;
bool allowInput = false;

auto startTime = chrono::steady_clock::now();
auto endTime = chrono::steady_clock::now();

int maze1[31][29] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1} }; // X = 6, Z = 1
int maze2[47][45] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} }; //X = 22, Z = 1
int maze3[62][61] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1} }; // X = 30, Z = 1
int maze4[61][61] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} }; // X = 30, Z = 37
int maze5[101][101] = {     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} }; // X = 54, Z = 45
int mazetrans[21][25] = { {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                          {1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} }; // X = 6, Z = 1
int mazetest[200][200] = { {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
                          { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, } };
int mapPosX = 50;
int mapPosZ = 50;
int movMapPosX = 0;
int movMapPosZ = 0;

int currentScene = 0;
int levelLoad = 0;
int objX = 6;
int objZ = 20;
bool comp_Enable = false;
bool loadText = false;
bool reloadMaze = false;
float doorColor_R = 0.0f;
float doorColor_G = 0.0f;
float doorColor_B = 0.0f;

void init() {
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); 
    glClearDepth(1.0f);                   
    glEnable(GL_DEPTH_TEST);   
    glDepthFunc(GL_LEQUAL);    
}

void sceneManager(int colX, int colZ)
{
    if (colX == -1 && colZ == -1) //Default is scene0 settings
    {
        currentScene = 0;
        levelLoad = 0;
        mapPosX = 6;
        mapPosZ = 1;
        movXOffset = 0.0f;
        movZOffset = 0.5f;
        angleCube = 0.0f;

        objX = 6;
        objZ = 20;
        compRot = 0;

        doorColor_R = 0.93f;
        doorColor_G = 0.17f;
        doorColor_B = 0.14f;

        ticksSince_Txt = 0;
        loadText = true;
    }
    else if (currentScene == 0) //First Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0) 
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 1;
            levelLoad = 1;
            mapPosX = 6;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 14;
            objZ = 29;
            compRot = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.93f;
            doorColor_G = 0.17f;
            doorColor_B = 0.14f;

            ticksSince_Txt = 0;
        }
    }
    else if (currentScene == 1) //Maze 1
    {
        if (colX == 14 && colZ == 29)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 2;
            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 1.0f;
            doorColor_G = 0.781f;
            doorColor_B = 0.05f;

            ticksSince_Txt = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 1;
            mapPosX = 6;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 14;
            objZ = 29;
            compRot = 0;
        }
    }
    else if (currentScene == 2) //Second Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0)
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 3;
            levelLoad = 2;
            mapPosX = 22;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 0;
            objZ = 39;
            compRot = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 1.0f;
            doorColor_G = 0.781f;
            doorColor_B = 0.05f;

            ticksSince_Txt = 0;
        }
    }
    else if (currentScene == 3) //Maze 2
    {
        if (colX == 0 && colZ == 39)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 4;
            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.78f;
            doorColor_G = 0.92f;
            doorColor_B = 0.27f;

            ticksSince_Txt = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 2;
            mapPosX = 22;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 0;
            objZ = 39;
            compRot = 0;
        }
    }
    else if (currentScene == 4) //Third Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0)
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 5;
            levelLoad = 3;
            mapPosX = 30;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 54;
            objZ = 61;
            compRot = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.78f;
            doorColor_G = 0.92f;
            doorColor_B = 0.27f;

            ticksSince_Txt = 0;
        }
    }
    else if (currentScene == 5) //Maze 3
    {
        if (colX == 54 && colZ == 61)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 6;
            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.08f;
            doorColor_G = 0.44f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 3;
            mapPosX = 30;
            mapPosZ = 2;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 54;
            objZ = 61;
            compRot = 0;
        }
    }
    else if (currentScene == 6) //Fourth Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0)
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 7;
            levelLoad = 4;
            mapPosX = 30;
            mapPosZ = 37;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 30;
            objZ = 60;
            compRot = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.08f;
            doorColor_G = 0.44f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
    }
    else if (currentScene == 7) //Maze 4
    {
        if (colX == 30 && colZ == 60)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 8;
            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.984f;
            doorColor_G = 0.0f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 4;
            mapPosX = 30;
            mapPosZ = 37;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 30;
            objZ = 60;
            compRot = 0;
        }
    }
    else if (currentScene == 8) //Fifth Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0)
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 9;
            levelLoad = 5;
            mapPosX = 54;
            mapPosZ = 45;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 54;
            objZ = 100;
            compRot = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 0.984f;
            doorColor_G = 0.0f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
    }
    else if (currentScene == 9) //Maze 5
    {
        if (colX == 54 && colZ == 100)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            currentScene = 10;
            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 1.0f;
            doorColor_G = 1.0f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 5;
            mapPosX = 54;
            mapPosZ = 45;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 54;
            objZ = 100;
            compRot = 0;
        }
    }
    else if (currentScene == 10) //Sixth Transition Room
    {
        if (colX == 8 && ticksSince_Txt == 0)
        {
            ticksSince_Txt = 0;
            loadText = true;
        }
        else if (colX == 6 && colZ == 20 && !loadText)
        {
            cout << "Game Finished!\n";
            endTime = chrono::steady_clock::now();
            cout << "Time taken to finish game: " << chrono::duration_cast<chrono::seconds>(endTime - startTime).count() << " seconds" << endl;
        }
        else if (reloadMaze)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            levelLoad = 0;
            mapPosX = 6;
            mapPosZ = 1;
            movXOffset = 0.0f;
            movZOffset = 0.5f;
            angleCube = 0.0f;

            objX = 6;
            objZ = 20;
            compRot = 0;

            doorColor_R = 1.0f;
            doorColor_G = 1.0f;
            doorColor_B = 1.0f;

            ticksSince_Txt = 0;
        }
    }
    else
    {
        cout << "Failed to load level!";
    }
}

void setOrthographicProjection() {

    glMatrixMode(GL_PROJECTION);

    glPushMatrix();

    glLoadIdentity();

    gluOrtho2D(0, winWidth, winHeight, 0);

    glMatrixMode(GL_MODELVIEW);
}

void restorePerspectiveProjection() {

    glMatrixMode(GL_PROJECTION);

    glPopMatrix();

    glMatrixMode(GL_MODELVIEW);
}

void renderSpacedBitmapString(float x, float y, int spacing, void* font, const char* string) {

    const char* c;
    int x1 = x;

    for (c = string; *c != '\0'; c++) {

        glRasterPos2f(x1, y);
        glutBitmapCharacter(font, *c);
        x1 = x1 + glutBitmapWidth(font, *c) + spacing;
    }
}

void textManager()
{
    // Text Rendering
    setOrthographicProjection();

    glPushMatrix();
    glLoadIdentity();

    if (currentScene == 0) 
    {
        if (ticksSince_Txt > tickAdjust_Txt * 1) 
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Ugh....My head, where am I? ");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Welcome! To the Mazes of M.E.G! That's an abbreviation for 'Mazes ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "of Extreme Geometry!'");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I hope you make yourself at home, experimental subject number 2!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: W-what happened to experimental subject number 1? ");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Oh, he's right here! Say hello whiskers!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 7)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: .....");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Of course his maze was a prototype! It was made of cardboard and he ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "jumped out of it almost immediately because the walls were too short!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9.7)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I have high hopes for your maze though... get it? cuz the walls");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "are higher?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10.7)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Why are you doing this? I have a job interview tomorrow!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 12)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I'm doing this for science of course! Imagine a future full of ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "monochromatic inescapable HIGH-tech mazes all over the world!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 13)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I'll be the next Einstein!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 14)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: I really don't see that trend taking off...");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 15)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Bah! You lack vision! You'll see!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 15)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: .....");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 16)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: So how the heck do I get out of here?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 17.75)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Why that's simple! Just use WASD to move and find the exit to ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "the maze!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 18.75)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: You can also use the left and right arrow keys to turn and");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "look around. Shouldn't be too hard, even for a jobless goofball! ");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 19.75)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Hey! I'm not a goofball, you're the goofball!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 20.5)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: No u!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 21.5)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Whatever, I don't have time for this. I'm leaving!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 22.5)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Good luck! Nyehehehehe!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 23.5)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze");
        }
        else
        {
            loadText = false;
        }
    }
    else if (currentScene == 2) 
    {   
        if (ticksSince_Txt > tickAdjust_Txt * 1)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Hey! You made it. See? I knew you could do it!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: It really wasn't that hard...");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Ohoho? Is that a challenge?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: WHISKERS! NO! Don't swat at that red button! ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "*panicked noises of someone leaving* ");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 7)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Wait!-");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: You'll be fine... But if you don't reach the exit before the");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "countdown timer gets to 0, everything goes BOOM! ");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9.5)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze (in progress...)");
        }
        else 
        {
            loadText = false;
        }
    }
    else if (currentScene == 4)
    {
        if (ticksSince_Txt > tickAdjust_Txt * 1)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Whew! You're alive.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Yeah, no thanks to you!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Hey, I tried to help! Blame whiskers.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Anyway, this might help you navigate quicker while I find a");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "way to deactivate the bomb.");

            if (!comp_Enable) 
            {
                comp_Enable = true;
            }
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 7)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Oh thanks, what is it?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: It's a compass, it'll show you where the exit is... kind of.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Kind of?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Gotta go, I have a bomb to deactivate. Cya!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 11)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze (in progress...)");
        }
        else
        {
            loadText = false;
        }
    }
    else if (currentScene == 6)
    {
        if (ticksSince_Txt > tickAdjust_Txt * 1)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Aha, here you are, I have no complaints on how you solved");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "that last one!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: YOU have no complaints? What about me! I have plenty of them!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: You should put them in the complaints box then.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: You have one of those? Where is that?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Why it's in my hand of course! How would I read the complaints from");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "the complaints box if I didn't have the complaints box?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 7.5)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Do you really not see the problem with that?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8.5)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Nope! On to the next maze!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: *sigh*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9.5)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10.5)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze (in progress...)");
        }
        else
        {
            loadText = false;
        }
    }
    else if (currentScene == 8)
    {
        if (ticksSince_Txt > tickAdjust_Txt * 1)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Hi Whiskers.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: And finally! The contender challenges the scientist's greatest,");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "bestest, most maddening maze! Witness... my grand creation!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5.5)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: MUAHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHHAHAHAHAHAHAHAHAHAHAHAHA!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: You sound like a mad scientist.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 7.5)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I'm a MEG scientist! ... get it?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: .....");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Don't you have a bomb to deactivate?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Yeah, yeah...");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10.5)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze (in progress...)");
        }
        else
        {          
            loadText = false;
        }
    }
    else if (currentScene == 10)
    {
        if (ticksSince_Txt > tickAdjust_Txt * 1)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 50));
            glVertex2i(winWidth, (winHeight - 50));
            glVertex2i(winWidth, winHeight);
            glEnd();
        }

        if (ticksSince_Txt <= tickAdjust_Txt * 1)
        {
            
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 2)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: Congratu-welldone!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 3)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: What?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 4.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: You have completed the final maze and therefore escaped from");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "the MAZES OF EXTREME GEOMETRY! DUN. DUN. DUN.");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 5)
        {
            glColor3f(1.0f, 0.50f, 0.75f);     // Pink Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Whiskers: *Meow*");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 6.5)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: I award you the title of No-Longer-A-Goofball! As for the jobless ");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "part... Good luck for your job interview!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 8)
        {
            glBegin(GL_QUADS);
            glColor3f(1.0f, 1.0f, 1.0f);     // White Text BG
            glVertex2i(0, winHeight);
            glVertex2i(0, (winHeight - 68));
            glVertex2i(winWidth, (winHeight - 68));
            glVertex2i(winWidth, winHeight);
            glEnd();

            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 36), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Gee... thanks... Yeah I'm finally free.");
            renderSpacedBitmapString(100, (winHeight - 11), 6, GLUT_BITMAP_TIMES_ROMAN_24, "*mutters under breath* Free from your bad jokes...");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 9)
        {
            glColor3f(0.78f, 0.0f, 1.0f);     // Purple Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Meg: What was that?");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 10)
        {
            glColor3f(0.0f, 0.635f, 0.91f);     // Blue Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "You: Nothing!");
        }
        else if (ticksSince_Txt <= tickAdjust_Txt * 11)
        {
            glColor3f(0.0f, 0.0f, 0.0f);     // Black Text
            renderSpacedBitmapString(10, (winHeight - 17), 6, GLUT_BITMAP_TIMES_ROMAN_24, "Current Goal: Escape the Maze (COMPLETED!)");
        }
        else
        {
            loadText = false;
        }
    }
    else
    {
        loadText = false;
    }

    glPopMatrix();

    restorePerspectiveProjection();
} 

void renderMap1() 
{
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.867f, 0.867f);     // Pale Red walls
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1E
    glVertex3f(-7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1F
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1G
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1E
    glVertex3f(-7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1F
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1G
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 0.0f + movZOffset);

    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.867f, 0.867f);     // Pale Red walls
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.97f, 0.61f, 0.62f);     // Mid Red stripe
    glVertex3f(1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.93f, 0.17f, 0.14f);     // Red door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.867f, 0.867f);     // Pale Red walls
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.01f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.01f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -14.01f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -14.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.97f, 0.61f, 0.62f);     // Mid Red stripe
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.001f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.001f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -14.001f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -14.001f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(-4.5f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-4.5f + movXOffset, 0.75f, -14.0f + movZOffset);
    glVertex3f(-3.5f + movXOffset, 0.75f, -14.0f + movZOffset);
    glVertex3f(-3.5f + movXOffset, -1.0f, -14.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.01f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.01f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -14.01f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -14.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-4.5f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-4.5f + movXOffset, 0.75f, -14.0f + movZOffset);
    glVertex3f(-3.5f + movXOffset, 0.75f, -14.0f + movZOffset);
    glVertex3f(-3.5f + movXOffset, -1.0f, -14.0f + movZOffset);
    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0.97f, 0.61f, 0.62f);     // Mid Red stripe
    // 1A
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1E
    glVertex3f(-7.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1F
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1G
    glVertex3f(-5.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glEnd();
}

void renderMap2()
{
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.92f, 0.75f);     // Pale Yellow walls
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1E
    glVertex3f(-3.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1F
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1J
    glVertex3f(-3.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1M
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1O
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1P
    glVertex3f(-5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1Q
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1R
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1S
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1T
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1U
    glVertex3f(-1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1V
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1X
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Y
    glVertex3f(3.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2A
    glVertex3f(7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2B
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2C
    glVertex3f(3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2D
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2E
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2F
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2G
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2H
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2I
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2J
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2K
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2L
    glVertex3f(9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2M
    glVertex3f(9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2N
    glVertex3f(1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1E
    glVertex3f(-3.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1F
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1J
    glVertex3f(-3.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1M
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1O
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1P
    glVertex3f(-5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1Q
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1R
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1S
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1T
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1U
    glVertex3f(-1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1V
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1X
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Y
    glVertex3f(3.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2A
    glVertex3f(7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2B
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2C
    glVertex3f(3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2D
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2E
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2F
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2G
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2H
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2I
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2J
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2K
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2L
    glVertex3f(9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2M
    glVertex3f(9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2N
    glVertex3f(1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 0.0f + movZOffset);

    glVertex3f(11.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.92f, 0.75f);     // Pale Yellow walls
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.83f, 0.51f);     // Mid Yellow stripe
    glVertex3f(1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.781f, 0.05f);     // Yellow door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.92f, 0.75f);     // Pale Yellow walls
    glVertex3f(11.01f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, -1.0f, -18.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.83f, 0.51f);     // Mid Yellow stripe
    glVertex3f(11.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(10.99f + movXOffset, -1.0f, -19.5f + movZOffset);
    glVertex3f(10.99f + movXOffset, 0.75f, -19.5f + movZOffset);
    glVertex3f(10.99f + movXOffset, 0.75f, -18.5f + movZOffset);
    glVertex3f(10.99f + movXOffset, -1.0f, -18.5f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(11.0f + movXOffset, -1.0f, -19.5f + movZOffset);
    glVertex3f(11.0f + movXOffset, 0.75f, -19.5f + movZOffset);
    glVertex3f(11.0f + movXOffset, 0.75f, -18.5f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -18.5f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(11.01f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.01f + movXOffset, -1.0f, -18.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.83f, 0.51f);     // Mid Yellow stripe
    // 1A  X = (-9, 11) | Z = (0, -20)
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1E
    glVertex3f(-3.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 1F
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1I
    glVertex3f(-3.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1J
    glVertex3f(-3.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1M
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 1N
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1O
    glVertex3f(1.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1P
    glVertex3f(-5.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1Q
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1R
    glVertex3f(-7.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1S
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1T
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1U
    glVertex3f(-1.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1V
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-5.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1X
    glVertex3f(3.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1Y
    glVertex3f(3.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 2A
    glVertex3f(7.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 2B
    glVertex3f(3.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 2C
    glVertex3f(3.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 2D
    glVertex3f(9.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2E
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2F
    glVertex3f(5.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2G
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2H
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2I
    glVertex3f(1.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2J
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2K
    glVertex3f(7.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2L
    glVertex3f(9.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2M
    glVertex3f(9.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2N
    glVertex3f(1.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glEnd();
}

void renderMap3()
{
    glBegin(GL_QUADS);
    glColor3f(0.94f, 1.0f, 0.717f);     // Pale Green walls
    // 1A  X = (-15, 15) | Z = (0, -30)
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1C
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1D
    glVertex3f(3.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1E
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1F
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1G
    glVertex3f(5.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1H
    glVertex3f(5.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1I
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1J
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1K
    glVertex3f(11.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1L
    glVertex3f(11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1N
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1O
    glVertex3f(7.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1P
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1Q
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 1R
    glVertex3f(3.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 1S
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1T
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1U
    glVertex3f(-3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1V
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1W
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1X
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Y
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -10.0f + movZOffset);


    // 1Z
    glVertex3f(-3.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2A
    glVertex3f(-7.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2B
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2E
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2F
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2G
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2H
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2M
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -30.0f + movZOffset);

    // 2N
    glVertex3f(-11.0f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 2O
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 2P
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 2Q
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 2R
    glVertex3f(-11.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2S
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 2T
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 2U
    glVertex3f(-5.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2V
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2W
    glVertex3f(-9.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 2Y
    glVertex3f(-5.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 2Z
    glVertex3f(-5.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3A
    glVertex3f(-9.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3B
    glVertex3f(-9.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3C
    glVertex3f(-3.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3D
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3E
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3F
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3G
    glVertex3f(5.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3H
    glVertex3f(5.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3I
    glVertex3f(7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3J
    glVertex3f(7.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3K
    glVertex3f(13.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3L
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3M
    glVertex3f(9.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3N
    glVertex3f(9.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3O
    glVertex3f(13.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3P
    glVertex3f(13.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 3S
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3T
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3U
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 3V
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 3W
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3X
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3Y
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3Z
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 4
    glVertex3f(11.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 4A
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 4B
    glVertex3f(13.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 4D
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 4E
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 4F
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    // 1A  X = (-15, 15) | Z = (0, -30)
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1C
    glVertex3f(3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1D
    glVertex3f(3.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1E
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1F
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1G
    glVertex3f(5.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1H
    glVertex3f(5.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1I
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1J
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1K
    glVertex3f(11.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1L
    glVertex3f(11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1N
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1O
    glVertex3f(7.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1P
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1Q
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 1R
    glVertex3f(3.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 1S
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1T
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 1U
    glVertex3f(-3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1V
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 1W
    glVertex3f(-7.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1X
    glVertex3f(-7.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Y
    glVertex3f(-3.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -10.0f + movZOffset);


    // 1Z
    glVertex3f(-3.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2A
    glVertex3f(-7.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2B
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2E
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2F
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2G
    glVertex3f(-7.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2H
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2M
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -30.0f + movZOffset);

    // 2N
    glVertex3f(-11.0f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 2O
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 2P
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 2Q
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 2R
    glVertex3f(-11.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2S
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 2
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 2T
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 2U
    glVertex3f(-5.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2V
    glVertex3f(-5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 2W
    glVertex3f(-9.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 2Y
    glVertex3f(-5.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 2Z
    glVertex3f(-5.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3A
    glVertex3f(-9.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3B
    glVertex3f(-9.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3C
    glVertex3f(-3.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3D
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3E
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3F
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3G
    glVertex3f(5.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3H
    glVertex3f(5.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3I
    glVertex3f(7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3J
    glVertex3f(7.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 3K
    glVertex3f(13.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3L
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 3M
    glVertex3f(9.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3N
    glVertex3f(9.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 3O
    glVertex3f(13.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3P
    glVertex3f(13.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 3S
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3T
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 3U
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 3V
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 3W
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3X
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3Y
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3Z
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 4
    glVertex3f(11.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 4A
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 4B
    glVertex3f(13.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 4D
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 4E
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 4F
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(15.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -30.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 0.0f + movZOffset);

    glVertex3f(15.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(0.94f, 1.0f, 0.717f);     // Pale Green walls
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.839f, 0.941f, 0.482f);     // Mid Green stripe
    glVertex3f(1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.78f, 0.92f, 0.27f);     // Green door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(0.94f, 1.0f, 0.717f);     // Pale Green walls
    glVertex3f(-13.0f + movXOffset, -1.0f, -30.01f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -30.01f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -30.01f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -30.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.839f, 0.941f, 0.482f);     // Mid Green stripe
    glVertex3f(-13.0f + movXOffset, -0.75f, -30.001f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.50f, -30.001f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.50f, -30.001f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -30.001f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(-12.5f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-12.5f + movXOffset, 0.75f, -30.0f + movZOffset);
    glVertex3f(-11.5f + movXOffset, 0.75f, -30.0f + movZOffset);
    glVertex3f(-11.5f + movXOffset, -1.0f, -30.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-13.0f + movXOffset, -1.0f, -30.01f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -30.01f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -30.01f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -30.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-12.5f + movXOffset, -1.0f, -30.0f + movZOffset);
    glVertex3f(-12.5f + movXOffset, 0.75f, -30.0f + movZOffset);
    glVertex3f(-11.5f + movXOffset, 0.75f, -30.0f + movZOffset);
    glVertex3f(-11.5f + movXOffset, -1.0f, -30.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.839f, 0.941f, 0.482f);     // Mid Green stripe
    // 1A  X = (-15, 15) | Z = (0, -30)
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1C
    glVertex3f(3.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1D
    glVertex3f(3.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1E
    glVertex3f(-1.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1F
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1G
    glVertex3f(5.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1H
    glVertex3f(5.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1I
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1J
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1K
    glVertex3f(11.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1L
    glVertex3f(11.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1M
    glVertex3f(-1.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1N
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1O
    glVertex3f(7.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 1P
    glVertex3f(7.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 1Q
    glVertex3f(3.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 1R
    glVertex3f(3.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 1S
    glVertex3f(1.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 1T
    glVertex3f(1.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 1U
    glVertex3f(-3.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 1V
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 1W
    glVertex3f(-7.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1X
    glVertex3f(-7.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1Y
    glVertex3f(-3.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -10.0f + movZOffset);


    // 1Z
    glVertex3f(-3.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2A
    glVertex3f(-7.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2B
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2E
    glVertex3f(-5.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2F
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2G
    glVertex3f(-7.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2H
    glVertex3f(-7.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2M
    glVertex3f(-13.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -30.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -30.0f + movZOffset);

    // 2N
    glVertex3f(-11.0f + movXOffset, -0.75f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -30.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 2O
    glVertex3f(-11.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 2P
    glVertex3f(-7.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 2Q
    glVertex3f(-7.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 2R
    glVertex3f(-11.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2S
    glVertex3f(-11.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 2
    glVertex3f(-9.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 2T
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 2U
    glVertex3f(-5.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 2V
    glVertex3f(-5.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 2W
    glVertex3f(-9.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 2Y
    glVertex3f(-5.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 2Z
    glVertex3f(-5.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 3A
    glVertex3f(-9.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3B
    glVertex3f(-9.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3C
    glVertex3f(-3.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3D
    glVertex3f(-3.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3E
    glVertex3f(-1.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3F
    glVertex3f(-1.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3G
    glVertex3f(5.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3H
    glVertex3f(5.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3I
    glVertex3f(7.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3J
    glVertex3f(7.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 3K
    glVertex3f(13.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 3L
    glVertex3f(13.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 3M
    glVertex3f(9.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3N
    glVertex3f(9.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 3O
    glVertex3f(13.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 3P
    glVertex3f(13.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 3S
    glVertex3f(9.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 3T
    glVertex3f(9.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 3U
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 3V
    glVertex3f(1.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 3W
    glVertex3f(13.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 3X
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 3Y
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 3Z
    glVertex3f(9.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 4
    glVertex3f(11.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 4A
    glVertex3f(11.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 4B
    glVertex3f(13.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 4D
    glVertex3f(3.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 4E
    glVertex3f(3.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 4F
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glEnd();
}

void renderMap4()
{
    glBegin(GL_QUADS);
    glColor3f(0.7f, 0.81f, 1.0f);     // Pale Blue walls
    // 1A  X = (-15, 15) | Z = (18, -12)
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1C
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1D
    glVertex3f(-7.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1E
    glVertex3f(-5.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1F
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1G
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 1I
    glVertex3f(-7.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1M
    glVertex3f(3.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1N
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1O
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1P
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1Q
    glVertex3f(1.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1R
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1S
    glVertex3f(5.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1T
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1U
    glVertex3f(7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1V
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1Y
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2A
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2B
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2C
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2D
    glVertex3f(11.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2E
    glVertex3f(11.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2F
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2G
    glVertex3f(13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2H
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 2I
    glVertex3f(9.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 2J
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2K
    glVertex3f(11.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2L
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 2M
    glVertex3f(13.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 2N
    glVertex3f(9.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2O
    glVertex3f(9.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Q
    glVertex3f(11.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2R
    glVertex3f(13.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2S
    glVertex3f(13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2T
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 2U
    glVertex3f(3.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 2V
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2W
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Y
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Z
    glVertex3f(-7.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 3A
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 3B
    glVertex3f(-5.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3C
    glVertex3f(-5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3D
    glVertex3f(-9.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3E
    glVertex3f(-9.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3F
    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3G
    glVertex3f(-11.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3H
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3I
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3J
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3K
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3L
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3M
    glVertex3f(-13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3N
    glVertex3f(-11.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3O
    glVertex3f(-11.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3P
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    // 1A  X = (-15, 15) | Z = (18, -12)
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1C
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1D
    glVertex3f(-7.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1E
    glVertex3f(-5.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1F
    glVertex3f(-5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1G
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 1I
    glVertex3f(-7.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 1M
    glVertex3f(3.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1N
    glVertex3f(3.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1O
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1P
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1Q
    glVertex3f(1.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1R
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1S
    glVertex3f(5.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1T
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 1U
    glVertex3f(7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1V
    glVertex3f(7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1Y
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(1.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2A
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2B
    glVertex3f(9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2C
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 2D
    glVertex3f(11.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2E
    glVertex3f(11.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 2F
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2G
    glVertex3f(13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2H
    glVertex3f(9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 2I
    glVertex3f(9.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 2J
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2K
    glVertex3f(11.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2L
    glVertex3f(13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 2M
    glVertex3f(13.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 2N
    glVertex3f(9.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2O
    glVertex3f(9.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Q
    glVertex3f(11.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2R
    glVertex3f(13.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2S
    glVertex3f(13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2T
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 2U
    glVertex3f(3.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 2V
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2W
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Y
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2Z
    glVertex3f(-7.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 3A
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 3B
    glVertex3f(-5.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3C
    glVertex3f(-5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3D
    glVertex3f(-9.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3E
    glVertex3f(-9.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3F
    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3G
    glVertex3f(-11.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3H
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3I
    glVertex3f(-13.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3J
    glVertex3f(-9.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3K
    glVertex3f(-9.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3L
    glVertex3f(-13.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3M
    glVertex3f(-13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 3N
    glVertex3f(-11.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3O
    glVertex3f(-11.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3P
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(-15.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 18.0f + movZOffset);

    glVertex3f(-15.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(0.7f, 0.81f, 1.0f);     // Pale Blue walls
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.474f, 0.67f, 1.0f);     // Mid Blue stripe
    glVertex3f(1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.08f, 0.44f, 1.0f);     // Blue door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(0.7f, 0.81f, 1.0f);     // Pale Blue walls
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -12.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.474f, 0.67f, 1.0f);     // Mid Blue stripe
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.001f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.001f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -12.001f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -12.001f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(-0.5f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -12.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -12.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -12.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-1.0f + movXOffset, -1.0f, -12.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -12.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -12.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -12.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-0.5f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -12.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -12.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -12.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.47f, 0.67f, 1.0f);     // Mid Blue stripe
    // 1A  X = (-15, 15) | Z = (18, -12)
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1C
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 1D
    glVertex3f(-7.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 1E
    glVertex3f(-5.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1F
    glVertex3f(-5.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1G
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 1H
    glVertex3f(-3.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 1I
    glVertex3f(-7.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 1J
    glVertex3f(-7.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 1K
    glVertex3f(-1.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 1L
    glVertex3f(-1.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 1M
    glVertex3f(3.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1N
    glVertex3f(3.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1O
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 1P
    glVertex3f(5.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 1Q
    glVertex3f(1.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 1R
    glVertex3f(1.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 1S
    glVertex3f(5.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 1T
    glVertex3f(5.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 1U
    glVertex3f(7.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1V
    glVertex3f(7.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 1Y
    glVertex3f(-1.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 1Z
    glVertex3f(1.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2A
    glVertex3f(1.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2B
    glVertex3f(9.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2C
    glVertex3f(9.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 2D
    glVertex3f(11.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2E
    glVertex3f(11.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 2F
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2G
    glVertex3f(13.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2H
    glVertex3f(9.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 2I
    glVertex3f(9.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 2J
    glVertex3f(11.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2K
    glVertex3f(11.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2L
    glVertex3f(13.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 2M
    glVertex3f(13.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 2N
    glVertex3f(9.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 2O
    glVertex3f(9.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2Q
    glVertex3f(11.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2R
    glVertex3f(13.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2S
    glVertex3f(13.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2T
    glVertex3f(3.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 2U
    glVertex3f(3.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 2V
    glVertex3f(1.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2W
    glVertex3f(1.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2X
    glVertex3f(-9.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2Y
    glVertex3f(-9.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2Z
    glVertex3f(-7.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 3A
    glVertex3f(-7.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 3B
    glVertex3f(-5.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 3C
    glVertex3f(-5.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 3D
    glVertex3f(-9.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 3E
    glVertex3f(-9.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 3F
    glVertex3f(-11.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 3G
    glVertex3f(-11.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 3H
    glVertex3f(-13.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 3I
    glVertex3f(-13.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 3J
    glVertex3f(-9.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 3K
    glVertex3f(-9.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 3L
    glVertex3f(-13.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 3M
    glVertex3f(-13.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 3N
    glVertex3f(-11.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 3O
    glVertex3f(-11.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 3P
    glVertex3f(1.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glEnd();
}

void renderMap5()
{
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.835f, 0.956f);     // Pale Magenta walls
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 1E
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1F
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1I
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1J
    glVertex3f(-11.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-17.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1L
    glVertex3f(-17.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1M
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1N
    glVertex3f(-13.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1O
    glVertex3f(-17.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1P
    glVertex3f(-17.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Q
    glVertex3f(-19.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1R
    glVertex3f(-19.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1S
    glVertex3f(-11.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1T
    glVertex3f(-11.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1U
    glVertex3f(-15.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1V
    glVertex3f(-15.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1Y
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Z
    glVertex3f(-5.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2A
    glVertex3f(-9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 2B
    glVertex3f(-9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2E
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2F
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2G
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2H
    glVertex3f(-3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 12.0f + movZOffset);


    // 2M
    glVertex3f(-15.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 2N
    glVertex3f(-15.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 2O
    glVertex3f(11.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2Q
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2R
    glVertex3f(3.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2S
    glVertex3f(7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2T
    glVertex3f(7.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2U
    glVertex3f(17.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2V
    glVertex3f(17.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2W
    glVertex3f(21.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2X
    glVertex3f(21.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2Y
    glVertex3f(17.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2Z
    glVertex3f(17.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 3A
    glVertex3f(23.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3B
    glVertex3f(23.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3C
    glVertex3f(19.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3D
    glVertex3f(19.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3E
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3F
    glVertex3f(5.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3G
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3H
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3I
    glVertex3f(-1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3J
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3K
    glVertex3f(1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 3L
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 3M
    glVertex3f(3.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3N
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3O
    glVertex3f(5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3P
    glVertex3f(5.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 3S
    glVertex3f(5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3T
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3U
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3V
    glVertex3f(9.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3W
    glVertex3f(7.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3X
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3Y
    glVertex3f(3.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 3Z
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4A
    glVertex3f(5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4B
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 4D
    glVertex3f(13.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 4E
    glVertex3f(15.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4F
    glVertex3f(15.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4G
    glVertex3f(23.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4H
    glVertex3f(23.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4I
    glVertex3f(19.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 4J
    glVertex3f(19.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 4K
    glVertex3f(17.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4L
    glVertex3f(17.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4M
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 4N
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 4O
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 4P
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 4Q
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 4R
    glVertex3f(11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 4S
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 4T
    glVertex3f(1.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 4U
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 4V
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 4W
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 4X
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4Y
    glVertex3f(9.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4Z
    glVertex3f(15.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5A
    glVertex3f(15.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5B
    glVertex3f(21.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 5C
    glVertex3f(21.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 5D
    glVertex3f(17.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 5E
    glVertex3f(17.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 5F
    glVertex3f(23.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5G
    glVertex3f(23.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5H
    glVertex3f(25.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 5I
    glVertex3f(25.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 5J
    glVertex3f(21.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 5K
    glVertex3f(21.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 5L
    glVertex3f(23.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 5M
    glVertex3f(23.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 5N
    glVertex3f(25.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 5O
    glVertex3f(25.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 5P
    glVertex3f(17.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 5Q
    glVertex3f(17.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 5R
    glVertex3f(19.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 5S
    glVertex3f(19.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 5T
    glVertex3f(25.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 5U
    glVertex3f(25.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 5V
    glVertex3f(23.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 5W
    glVertex3f(23.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 5X
    glVertex3f(21.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 5Y
    glVertex3f(21.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 5Z
    glVertex3f(25.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6A
    glVertex3f(25.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6B
    glVertex3f(19.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6C
    glVertex3f(19.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6D
    glVertex3f(23.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6E
    glVertex3f(23.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6F
    glVertex3f(15.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6G
    glVertex3f(15.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6H
    glVertex3f(11.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 6I
    glVertex3f(11.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 6J
    glVertex3f(15.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 6K
    glVertex3f(15.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 6L
    glVertex3f(9.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6M
    glVertex3f(9.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6N
    glVertex3f(5.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6O
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6P
    glVertex3f(13.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6Q
    glVertex3f(13.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6R
    glVertex3f(17.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6S
    glVertex3f(17.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6T
    glVertex3f(-17.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6U
    glVertex3f(-17.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6V
    glVertex3f(-19.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6W
    glVertex3f(-19.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6X
    glVertex3f(-21.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6Y
    glVertex3f(-21.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6Z
    glVertex3f(-17.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 7A
    glVertex3f(-17.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 7B
    glVertex3f(-21.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7C
    glVertex3f(-21.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7D
    glVertex3f(-19.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 7E
    glVertex3f(-19.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 7F
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 7G
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 7H
    glVertex3f(-5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7I
    glVertex3f(-5.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7J
    glVertex3f(-7.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 7K
    glVertex3f(-7.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 7L
    glVertex3f(-17.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7M
    glVertex3f(-17.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7N
    glVertex3f(-13.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7O
    glVertex3f(-13.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7P
    glVertex3f(-21.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 7Q
    glVertex3f(-21.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 7R
    glVertex3f(-15.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 7S
    glVertex3f(-15.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 7T
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 7U
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 7V
    glVertex3f(-13.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 7W
    glVertex3f(-13.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 7X
    glVertex3f(-21.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 7Y
    glVertex3f(-21.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 7Z
    glVertex3f(-15.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8A
    glVertex3f(-15.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8B
    glVertex3f(-19.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8C
    glVertex3f(-19.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8D
    glVertex3f(-13.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 8E
    glVertex3f(-13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 8F
    glVertex3f(-3.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8G
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8H
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8I
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8J
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 8K
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 8L
    glVertex3f(3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8M
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8N
    glVertex3f(5.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 8O
    glVertex3f(5.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 8P
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border

    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 1E
    glVertex3f(-11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1F
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1I
    glVertex3f(-11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1J
    glVertex3f(-11.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-17.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1L
    glVertex3f(-17.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1M
    glVertex3f(-13.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1N
    glVertex3f(-13.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1O
    glVertex3f(-17.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1P
    glVertex3f(-17.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Q
    glVertex3f(-19.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1R
    glVertex3f(-19.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1S
    glVertex3f(-11.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1T
    glVertex3f(-11.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 1U
    glVertex3f(-15.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1V
    glVertex3f(-15.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1Y
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 1Z
    glVertex3f(-5.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 2A
    glVertex3f(-9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 2B
    glVertex3f(-9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 2E
    glVertex3f(-7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2F
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 2G
    glVertex3f(-3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2H
    glVertex3f(-3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 12.0f + movZOffset);


    // 2M
    glVertex3f(-15.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 2N
    glVertex3f(-15.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 2O
    glVertex3f(11.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 2Q
    glVertex3f(3.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2R
    glVertex3f(3.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2S
    glVertex3f(7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2T
    glVertex3f(7.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 2U
    glVertex3f(17.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2V
    glVertex3f(17.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 2W
    glVertex3f(21.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2X
    glVertex3f(21.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 2Y
    glVertex3f(17.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 2Z
    glVertex3f(17.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 3A
    glVertex3f(23.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3B
    glVertex3f(23.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3C
    glVertex3f(19.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3D
    glVertex3f(19.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 3E
    glVertex3f(5.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3F
    glVertex3f(5.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 3G
    glVertex3f(1.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3H
    glVertex3f(1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 3I
    glVertex3f(-1.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3J
    glVertex3f(-1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3K
    glVertex3f(1.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 3L
    glVertex3f(1.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 3M
    glVertex3f(3.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3N
    glVertex3f(3.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 3O
    glVertex3f(5.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3P
    glVertex3f(5.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 3S
    glVertex3f(5.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3T
    glVertex3f(5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 3U
    glVertex3f(9.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3V
    glVertex3f(9.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 3W
    glVertex3f(7.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3X
    glVertex3f(7.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 3Y
    glVertex3f(3.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 3Z
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4A
    glVertex3f(5.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4B
    glVertex3f(5.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 4D
    glVertex3f(13.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 4E
    glVertex3f(15.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4F
    glVertex3f(15.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 4G
    glVertex3f(23.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4H
    glVertex3f(23.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4I
    glVertex3f(19.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 4J
    glVertex3f(19.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 4K
    glVertex3f(17.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4L
    glVertex3f(17.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 4M
    glVertex3f(7.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 4N
    glVertex3f(7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 4O
    glVertex3f(9.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 4P
    glVertex3f(9.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 4Q
    glVertex3f(11.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 4R
    glVertex3f(11.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 4S
    glVertex3f(-1.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.0f + movZOffset);

    // 4T
    glVertex3f(1.0f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 4U
    glVertex3f(1.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 4V
    glVertex3f(13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 4W
    glVertex3f(13.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 4X
    glVertex3f(9.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4Y
    glVertex3f(9.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 4Z
    glVertex3f(15.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5A
    glVertex3f(15.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5B
    glVertex3f(21.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 5C
    glVertex3f(21.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 5D
    glVertex3f(17.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 5E
    glVertex3f(17.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 5F
    glVertex3f(23.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5G
    glVertex3f(23.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 5H
    glVertex3f(25.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 5I
    glVertex3f(25.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 5J
    glVertex3f(21.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 5K
    glVertex3f(21.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -14.0f + movZOffset);

    // 5L
    glVertex3f(23.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 5M
    glVertex3f(23.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 5N
    glVertex3f(25.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 5O
    glVertex3f(25.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 5P
    glVertex3f(17.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 5Q
    glVertex3f(17.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 5R
    glVertex3f(19.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 5S
    glVertex3f(19.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 5T
    glVertex3f(25.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 5U
    glVertex3f(25.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 4.0f + movZOffset);

    // 5V
    glVertex3f(23.0f + movXOffset, -1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 5W
    glVertex3f(23.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 5X
    glVertex3f(21.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 5Y
    glVertex3f(21.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 6.0f + movZOffset);

    // 5Z
    glVertex3f(25.0f + movXOffset, -1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6A
    glVertex3f(25.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6B
    glVertex3f(19.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6C
    glVertex3f(19.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6D
    glVertex3f(23.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6E
    glVertex3f(23.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6F
    glVertex3f(15.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6G
    glVertex3f(15.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6H
    glVertex3f(11.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 6I
    glVertex3f(11.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 6J
    glVertex3f(15.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 6K
    glVertex3f(15.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 6L
    glVertex3f(9.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6M
    glVertex3f(9.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 6N
    glVertex3f(5.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6O
    glVertex3f(5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6P
    glVertex3f(13.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6Q
    glVertex3f(13.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 18.0f + movZOffset);

    // 6R
    glVertex3f(17.0f + movXOffset, -1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6S
    glVertex3f(17.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6T
    glVertex3f(-17.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6U
    glVertex3f(-17.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 16.0f + movZOffset);

    // 6V
    glVertex3f(-19.0f + movXOffset, -1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6W
    glVertex3f(-19.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 20.0f + movZOffset);

    // 6X
    glVertex3f(-21.0f + movXOffset, -1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6Y
    glVertex3f(-21.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 6Z
    glVertex3f(-17.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 7A
    glVertex3f(-17.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 12.0f + movZOffset);

    // 7B
    glVertex3f(-21.0f + movXOffset, -1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7C
    glVertex3f(-21.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7D
    glVertex3f(-19.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 7E
    glVertex3f(-19.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);

    // 7F
    glVertex3f(-7.0f + movXOffset, -1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 7G
    glVertex3f(-7.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 14.0f + movZOffset);

    // 7H
    glVertex3f(-5.0f + movXOffset, -1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7I
    glVertex3f(-5.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7J
    glVertex3f(-7.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 7K
    glVertex3f(-7.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 8.0f + movZOffset);

    // 7L
    glVertex3f(-17.0f + movXOffset, -1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7M
    glVertex3f(-17.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 2.0f + movZOffset);

    // 7N
    glVertex3f(-13.0f + movXOffset, -1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7O
    glVertex3f(-13.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, 0.0f + movZOffset);

    // 7P
    glVertex3f(-21.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 7Q
    glVertex3f(-21.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 7R
    glVertex3f(-15.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 7S
    glVertex3f(-15.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 7T
    glVertex3f(-9.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 7U
    glVertex3f(-9.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -12.0f + movZOffset);

    // 7V
    glVertex3f(-13.0f + movXOffset, -1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 7W
    glVertex3f(-13.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -20.0f + movZOffset);

    // 7X
    glVertex3f(-21.0f + movXOffset, -1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 7Y
    glVertex3f(-21.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 7Z
    glVertex3f(-15.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8A
    glVertex3f(-15.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8B
    glVertex3f(-19.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8C
    glVertex3f(-19.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8D
    glVertex3f(-13.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 8E
    glVertex3f(-13.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -26.0f + movZOffset);

    // 8F
    glVertex3f(-3.0f + movXOffset, -1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8G
    glVertex3f(-3.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);

    // 8H
    glVertex3f(-7.0f + movXOffset, -1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8I
    glVertex3f(-7.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8J
    glVertex3f(1.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 8K
    glVertex3f(1.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -18.0f + movZOffset);

    // 8L
    glVertex3f(3.0f + movXOffset, -1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8M
    glVertex3f(3.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -22.0f + movZOffset);

    // 8N
    glVertex3f(5.0f + movXOffset, -1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 8O
    glVertex3f(5.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);

    // 8P
    glVertex3f(1.0f + movXOffset, -1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(-40.0f + movXOffset, 1.0f, 40.0f + movZOffset);
    glVertex3f(-40.0f + movXOffset, 1.0f, -40.0f + movZOffset);
    glVertex3f(40.0f + movXOffset, 1.0f, -40.0f + movZOffset);
    glVertex3f(40.0f + movXOffset, 1.0f, 40.0f + movZOffset);

    glVertex3f(-40.0f + movXOffset, -1.0f, 40.0f + movZOffset);
    glVertex3f(-40.0f + movXOffset, -1.0f, -40.0f + movZOffset);
    glVertex3f(40.0f + movXOffset, -1.0f, -40.0f + movZOffset);
    glVertex3f(40.0f + movXOffset, -1.0f, 40.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.835f, 0.956f);     // Pale Magenta walls
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.988f, 0.576f, 1.0f);     // Mid Magenta stripe
    glVertex3f(1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.984f, 0.0f, 1.0f);     // Magenta door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(1.0f, 0.835f, 0.956f);     // Pale Magenta walls
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -28.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -28.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.988f, 0.576f, 1.0f);     // Mid Magenta stripe
    glVertex3f(-1.0f + movXOffset, -0.75f, -28.001f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -28.001f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -28.001f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -28.001f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(-0.5f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -28.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -28.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -28.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-1.0f + movXOffset, -1.0f, -28.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -28.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -28.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -28.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-0.5f + movXOffset, -1.0f, -28.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -28.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -28.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -28.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.99f, 0.58f, 1.0f);     // Mid Magenta stripe
    // 1A
    glVertex3f(-1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 1C
    glVertex3f(-9.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 1D
    glVertex3f(-9.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 1E
    glVertex3f(-11.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1F
    glVertex3f(-11.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 1G
    glVertex3f(-7.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1H
    glVertex3f(-7.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1I
    glVertex3f(-11.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1J
    glVertex3f(-11.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 1K
    glVertex3f(-17.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1L
    glVertex3f(-17.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1M
    glVertex3f(-13.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1N
    glVertex3f(-13.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 1O
    glVertex3f(-17.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1P
    glVertex3f(-17.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1Q
    glVertex3f(-19.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1R
    glVertex3f(-19.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 1S
    glVertex3f(-11.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 1T
    glVertex3f(-11.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 1U
    glVertex3f(-15.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 1V
    glVertex3f(-15.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 1W
    glVertex3f(-9.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1X
    glVertex3f(-9.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 1Y
    glVertex3f(-5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 1Z
    glVertex3f(-5.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 2A
    glVertex3f(-9.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 2B
    glVertex3f(-9.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 2C
    glVertex3f(-3.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2D
    glVertex3f(-3.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 2E
    glVertex3f(-7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2F
    glVertex3f(-7.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 2G
    glVertex3f(-3.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2H
    glVertex3f(-3.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2I
    glVertex3f(-13.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 2J
    glVertex3f(-13.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 2K
    glVertex3f(-9.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 2L
    glVertex3f(-9.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, 12.0f + movZOffset);


    // 2M
    glVertex3f(-15.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 2N
    glVertex3f(-15.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 2O
    glVertex3f(11.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2P
    glVertex3f(11.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 2Q
    glVertex3f(3.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 2R
    glVertex3f(3.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 2S
    glVertex3f(7.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2T
    glVertex3f(7.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 2U
    glVertex3f(17.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 2V
    glVertex3f(17.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 2W
    glVertex3f(21.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 2X
    glVertex3f(21.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 2Y
    glVertex3f(17.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 2Z
    glVertex3f(17.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 3A
    glVertex3f(23.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 3B
    glVertex3f(23.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 3C
    glVertex3f(19.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 3D
    glVertex3f(19.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 3E
    glVertex3f(5.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 3F
    glVertex3f(5.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 3G
    glVertex3f(1.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 3H
    glVertex3f(1.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 3I
    glVertex3f(-1.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 3J
    glVertex3f(-1.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 3K
    glVertex3f(1.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 3L
    glVertex3f(1.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 3M
    glVertex3f(3.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 3N
    glVertex3f(3.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -2.0f + movZOffset);

    // 3O
    glVertex3f(5.0f + movXOffset, -0.75f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 3P
    glVertex3f(5.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 3Q
    glVertex3f(11.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 3R
    glVertex3f(11.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 3S
    glVertex3f(5.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 3T
    glVertex3f(5.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 3U
    glVertex3f(9.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 3V
    glVertex3f(9.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 3W
    glVertex3f(7.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 3X
    glVertex3f(7.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 3Y
    glVertex3f(3.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 3Z
    glVertex3f(3.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 4A
    glVertex3f(5.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 4B
    glVertex3f(5.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 4C
    glVertex3f(13.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 4D
    glVertex3f(13.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 4E
    glVertex3f(15.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 4F
    glVertex3f(15.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 4G
    glVertex3f(23.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 4H
    glVertex3f(23.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 4I
    glVertex3f(19.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 4J
    glVertex3f(19.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 4K
    glVertex3f(17.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 4L
    glVertex3f(17.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 4M
    glVertex3f(7.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 4N
    glVertex3f(7.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 4O
    glVertex3f(9.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 4P
    glVertex3f(9.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 4Q
    glVertex3f(11.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 4R
    glVertex3f(11.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 4S
    glVertex3f(-1.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -0.75f, -28.0f + movZOffset);

    // 4T
    glVertex3f(1.0f + movXOffset, -0.75f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -28.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 4U
    glVertex3f(1.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 4V
    glVertex3f(13.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 4W
    glVertex3f(13.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 4X
    glVertex3f(9.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 4Y
    glVertex3f(9.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 4Z
    glVertex3f(15.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 5A
    glVertex3f(15.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 5B
    glVertex3f(21.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 5C
    glVertex3f(21.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 5D
    glVertex3f(17.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 5E
    glVertex3f(17.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 5F
    glVertex3f(23.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 5G
    glVertex3f(23.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 5H
    glVertex3f(25.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 5I
    glVertex3f(25.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 5J
    glVertex3f(21.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 5K
    glVertex3f(21.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -14.0f + movZOffset);

    // 5L
    glVertex3f(23.0f + movXOffset, -0.75f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -14.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 5M
    glVertex3f(23.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 5N
    glVertex3f(25.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 5O
    glVertex3f(25.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, -8.0f + movZOffset);

    // 5P
    glVertex3f(17.0f + movXOffset, -0.75f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, -8.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 5Q
    glVertex3f(17.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 5R
    glVertex3f(19.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 5S
    glVertex3f(19.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, -6.0f + movZOffset);

    // 5T
    glVertex3f(25.0f + movXOffset, -0.75f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, -6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 5U
    glVertex3f(25.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, 4.0f + movZOffset);

    // 5V
    glVertex3f(23.0f + movXOffset, -0.75f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 5W
    glVertex3f(23.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, -4.0f + movZOffset);

    // 5X
    glVertex3f(21.0f + movXOffset, -0.75f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, -4.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 5Y
    glVertex3f(21.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(21.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, 6.0f + movZOffset);

    // 5Z
    glVertex3f(25.0f + movXOffset, -0.75f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 6.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6A
    glVertex3f(25.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(25.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6B
    glVertex3f(19.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 6C
    glVertex3f(19.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(19.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 6D
    glVertex3f(23.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 6E
    glVertex3f(23.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(23.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 6F
    glVertex3f(15.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 6G
    glVertex3f(15.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 6H
    glVertex3f(11.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 6I
    glVertex3f(11.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(11.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 6J
    glVertex3f(15.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 6K
    glVertex3f(15.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(15.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 6L
    glVertex3f(9.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 6M
    glVertex3f(9.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(9.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 6N
    glVertex3f(5.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 6O
    glVertex3f(5.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 6P
    glVertex3f(13.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 6Q
    glVertex3f(13.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(13.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 18.0f + movZOffset);

    // 6R
    glVertex3f(17.0f + movXOffset, -0.75f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 18.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6S
    glVertex3f(17.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(17.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6T
    glVertex3f(-17.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 6U
    glVertex3f(-17.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, 16.0f + movZOffset);

    // 6V
    glVertex3f(-19.0f + movXOffset, -0.75f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 16.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6W
    glVertex3f(-19.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, 20.0f + movZOffset);

    // 6X
    glVertex3f(-21.0f + movXOffset, -0.75f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 6Y
    glVertex3f(-21.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 6Z
    glVertex3f(-17.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 7A
    glVertex3f(-17.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, 12.0f + movZOffset);

    // 7B
    glVertex3f(-21.0f + movXOffset, -0.75f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 12.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 7C
    glVertex3f(-21.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 7D
    glVertex3f(-19.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 7E
    glVertex3f(-19.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 10.0f + movZOffset);

    // 7F
    glVertex3f(-7.0f + movXOffset, -0.75f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 10.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 7G
    glVertex3f(-7.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, 14.0f + movZOffset);

    // 7H
    glVertex3f(-5.0f + movXOffset, -0.75f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 14.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 7I
    glVertex3f(-5.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 7J
    glVertex3f(-7.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 7K
    glVertex3f(-7.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 8.0f + movZOffset);

    // 7L
    glVertex3f(-17.0f + movXOffset, -0.75f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 8.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 7M
    glVertex3f(-17.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-17.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, 2.0f + movZOffset);

    // 7N
    glVertex3f(-13.0f + movXOffset, -0.75f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 2.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 7O
    glVertex3f(-13.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, 0.0f + movZOffset);

    // 7P
    glVertex3f(-21.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 7Q
    glVertex3f(-21.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 7R
    glVertex3f(-15.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 7S
    glVertex3f(-15.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -10.0f + movZOffset);

    // 7T
    glVertex3f(-9.0f + movXOffset, -0.75f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -10.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 7U
    glVertex3f(-9.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-9.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -12.0f + movZOffset);

    // 7V
    glVertex3f(-13.0f + movXOffset, -0.75f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -12.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 7W
    glVertex3f(-13.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, -20.0f + movZOffset);

    // 7X
    glVertex3f(-21.0f + movXOffset, -0.75f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -20.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 7Y
    glVertex3f(-21.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-21.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 7Z
    glVertex3f(-15.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 8A
    glVertex3f(-15.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-15.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 8B
    glVertex3f(-19.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8C
    glVertex3f(-19.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-19.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8D
    glVertex3f(-13.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 8E
    glVertex3f(-13.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-13.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -26.0f + movZOffset);

    // 8F
    glVertex3f(-3.0f + movXOffset, -0.75f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -26.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 8G
    glVertex3f(-3.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-3.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -24.0f + movZOffset);

    // 8H
    glVertex3f(-7.0f + movXOffset, -0.75f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -24.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8I
    glVertex3f(-7.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8J
    glVertex3f(1.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 8K
    glVertex3f(1.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -18.0f + movZOffset);

    // 8L
    glVertex3f(3.0f + movXOffset, -0.75f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -18.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8M
    glVertex3f(3.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -22.0f + movZOffset);

    // 8N
    glVertex3f(5.0f + movXOffset, -0.75f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -22.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 8O
    glVertex3f(5.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(5.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, -16.0f + movZOffset);

    // 8P
    glVertex3f(1.0f + movXOffset, -0.75f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, -16.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.5f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -0.75f, 0.0f + movZOffset);
    glEnd();
}

void renderMapTrans()
{
    glBegin(GL_QUADS);
    glColor3f(0.745f, 0.69f, 1.0f);     // Pale Purple walls
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1D
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1E
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1F
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1G
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1H
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1I
    glVertex3f(-5.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1J
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    // 1A
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1B
    glVertex3f(-1.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);

    // 1C
    glVertex3f(-7.0f + movXOffset, -1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -2.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1D
    glVertex3f(-7.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-7.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);

    // 1E
    glVertex3f(-1.0f + movXOffset, -1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -8.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.0f + movZOffset);

    // 1F
    glVertex3f(1.0f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1G
    glVertex3f(1.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);

    // 1H
    glVertex3f(-5.0f + movXOffset, -1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -6.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1I
    glVertex3f(-5.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(-5.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);

    // 1J
    glVertex3f(1.0f + movXOffset, -1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -4.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.5f, 0.5f, 0.5f);      // Light Gray ceiling floor
    glVertex3f(-11.0f + movXOffset, 1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, 1.0f, 0.0f + movZOffset);

    glVertex3f(-11.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(-11.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, -14.0f + movZOffset);
    glVertex3f(3.0f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Doorway
    glBegin(GL_QUADS);
    glColor3f(0.745f, 0.69f, 1.0f);     // Pale Purple
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray
    glVertex3f(1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, 0.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, -1.0f, 0.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);     // Black door
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, 0.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, -1.0f, 0.0f + movZOffset);
    glEnd();

    //Exit
    glBegin(GL_QUADS);
    glColor3f(0.745f, 0.69f, 1.0f);     // Pale Purple walls
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.01f + movZOffset);
    glEnd();

    glBegin(GL_QUADS);
    glColor3f(doorColor_R, doorColor_G, doorColor_B);     // dynamic colour for next maze door
    glVertex3f(-0.5f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -10.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -10.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -10.0f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-1.0f + movXOffset, -1.0f, -10.01f + movZOffset);
    glVertex3f(-1.0f + movXOffset, 1.0f, -10.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, 1.0f, -10.01f + movZOffset);
    glVertex3f(1.0f + movXOffset, -1.0f, -10.01f + movZOffset);
    glEnd();

    glLineWidth(5);
    glBegin(GL_LINES);
    glColor3f(0.5f, 0.5f, 0.5f);     // Light Gray border
    glVertex3f(-0.5f + movXOffset, -1.0f, -10.0f + movZOffset);
    glVertex3f(-0.5f + movXOffset, 0.75f, -10.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, 0.75f, -10.0f + movZOffset);
    glVertex3f(0.5f + movXOffset, -1.0f, -10.0f + movZOffset);
    glEnd();
}

void renderCompass() 
{
    int currentDifX = objX - mapPosX;
    int currentDifZ = objZ - mapPosZ;
    int absDif = abs(currentDifX) + abs(currentDifZ);

    if (currentDifX == 0 && currentDifZ >= 0)
    {
        angleCompass = 0.0f;
    }
    else if (currentDifX == 0 && currentDifZ < 0)
    {
        angleCompass = 180.0f;
    }
    else if (currentDifX >= 0 && currentDifZ == 0) 
    {
        angleCompass = 270.0f;
    }
    else if (currentDifX < 0 && currentDifZ == 0) 
    {
        angleCompass = 90.0f;
    }
    else if (currentDifX >= 0 && currentDifZ >= 0) 
    {
        if (abs(currentDifX) == abs(currentDifZ) || (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ) && abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ)))
        {
            angleCompass = 45.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 2) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ))))
        {
            angleCompass = 30.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 3) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 15.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 4) >= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 0.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ))))
        {
            angleCompass = 60.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 3) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 75.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 4) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 90.0f;
        }
    }
    else if (currentDifX < 0 && currentDifZ >= 0)
    {
        if (abs(currentDifX) == abs(currentDifZ) || (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ) && abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ)))
        {
            angleCompass = 315.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 2) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ))))
        {
            angleCompass = 300.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 3) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 285.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 4) >= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 270.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ))))
        {
            angleCompass = 330.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 3) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 345.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 4) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 0.0f;
        }
    }
    else if (currentDifX >= 0 && currentDifZ < 0)
    {
        if (abs(currentDifX) == abs(currentDifZ) || (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ) && abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ)))
        {
            angleCompass = 135.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 2) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ))))
        {
            angleCompass = 120.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 3) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 105.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 4) >= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 90.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ))))
        {
            angleCompass = 150.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 3) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 165.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 4) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 180.0f;
        }
    }
    else if (currentDifX < 0 && currentDifZ < 0)
    {
        if (abs(currentDifX) == abs(currentDifZ) || (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ) && abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ)))
        {
            angleCompass = 225.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 2) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143) <= abs(currentDifZ))))
        {
            angleCompass = 210.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 3) >= abs(currentDifZ) && (abs(currentDifX) - (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 195.0f;
        }
        else if ((abs(currentDifX) - (absDif * 0.143 * 4) >= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ))))
        {
            angleCompass = 180.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 2) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143) >= abs(currentDifZ))))
        {
            angleCompass = 240.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 3) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 255.0f;
        }
        else if ((abs(currentDifX) + (absDif * 0.143 * 4) <= abs(currentDifZ) && (abs(currentDifX) + (absDif * 0.143 * 2) >= abs(currentDifZ))))
        {
            angleCompass = 270.0f;
        }
    }

    glTranslatef(0.0f, 0.15f, -0.3f);
    glRotatef(angleCompass - (15 * compRot), 0.0f, 1.0f, 0.0f);
    glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 1.0f);     // White door
    glVertex3f(0.025f, 0.0f, 0.075f);
    glVertex3f(-0.025f, 0.0f, 0.075f);
    glVertex3f(-0.02f, 0.0f, -0.025f);
    glVertex3f(0.02f, 0.0f, -0.025f);

    glVertex3f(0.0f, 0.0f, -0.025f);
    glVertex3f(-0.035f, 0.0f, -0.025f);
    glVertex3f(0.0f, 0.0f, -0.075f);
    glVertex3f(0.035f, 0.0f, -0.025f);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);     

    if (comp_Enable) 
    {
        glLoadIdentity();
        renderCompass();
    }

    glLoadIdentity();
    //Can't use these to get top down view
    glRotatef(angleCube, axisRotX, axisRotY, axisRotZ);  // Rotate about (1,1,1)-axis
            
    if (levelLoad == 0) 
    {
        renderMapTrans();
    }
    else if (levelLoad == 1) 
    {
        renderMap1();
    }
    else if (levelLoad == 2)
    {
        renderMap2();
    }
    else if (levelLoad == 3)
    {
        renderMap3();
    }
    else if (levelLoad == 4)
    {
        renderMap4();
    }
    else if (levelLoad == 5)
    {
        renderMap5();
    }  

    if (loadText) 
    {
        textManager();
    }

    glutSwapBuffers();  
}

bool checkCollision() 
{
    try 
    {
        if (levelLoad == 0)
        {
            if (mazetrans[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || mazetrans[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
            {
                mapPosZ += movMapPosZ;
                mapPosX += movMapPosX;

                movMapPosX = 0;
                movMapPosZ = 0;

                return true;
            }
            else if (mazetrans[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
            {
                ticksSince = tickAdjust;
                allowInput = false;

                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                movMapPosX = 0;
                movMapPosZ = 0;

                return false;
            }
            else if (mazetrans[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
            {
                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                mapPosZ += movMapPosZ;
                mapPosX += movMapPosX;

                movMapPosX = 0;
                movMapPosZ = 0;

                return true;
            }
            else
            {
                //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
                //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
                //cout << "Read location " << mazetrans[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

                movMapPosX = 0;
                movMapPosZ = 0;

                return false;
            }
        }
        else if (levelLoad == 1)
        {
            if (maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
            {
                mapPosZ += movMapPosZ;
                mapPosX += movMapPosX;

                movMapPosX = 0;
                movMapPosZ = 0;

                return true;
            }
            else if (maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
            {
                ticksSince = tickAdjust;
                allowInput = false;

                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                return false;
            }
            else if (maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
            {
                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                return false;
            }
            else
            {
                //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
                //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
                //cout << "Read location " << maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

                movMapPosX = 0;
                movMapPosZ = 0;

                return false;
            }
        }
        else if (levelLoad == 2)
        {
            if (maze2[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || maze2[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
            {
                mapPosZ += movMapPosZ;
                mapPosX += movMapPosX;

                movMapPosX = 0;
                movMapPosZ = 0;

                return true;
            }
            else if (maze2[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
            {
                ticksSince = tickAdjust;
                allowInput = false;

                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                return false;
            }
            else if (maze2[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
            {
                sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

                return false;
            }
            else
            {
                //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
                //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
                //cout << "Read location " << maze2[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

                movMapPosX = 0;
                movMapPosZ = 0;

                return false;
            }
        }
        else if (levelLoad == 3)
        {
        if (maze3[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || maze3[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
        {
            mapPosZ += movMapPosZ;
            mapPosX += movMapPosX;

            movMapPosX = 0;
            movMapPosZ = 0;

            return true;
        }
        else if (maze3[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else if (maze3[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
        {
            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else
        {
            //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
            //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
            //cout << "Read location " << maze3[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

            movMapPosX = 0;
            movMapPosZ = 0;

            return false;
        }
        }
        else if (levelLoad == 4)
        {
        if (maze4[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || maze4[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
        {
            mapPosZ += movMapPosZ;
            mapPosX += movMapPosX;

            movMapPosX = 0;
            movMapPosZ = 0;

            return true;
        }
        else if (maze4[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else if (maze4[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
        {
            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else
        {
            //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
            //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
            //cout << "Read location " << maze4[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

            movMapPosX = 0;
            movMapPosZ = 0;

            return false;
        }
        }
        else if (levelLoad == 5)
        {
        if (maze5[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 0 || maze5[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 2)
        {
            mapPosZ += movMapPosZ;
            mapPosX += movMapPosX;

            movMapPosX = 0;
            movMapPosZ = 0;

            return true;
        }
        else if (maze5[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 3)
        {
            ticksSince = tickAdjust;
            allowInput = false;

            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else if (maze1[mapPosZ + movMapPosZ][mapPosX + movMapPosX] == 4)
        {
            sceneManager(mapPosX + movMapPosX, mapPosZ + movMapPosZ);

            return false;
        }
        else
        {
            //cout << "Current X Pos " << mapPosX + movMapPosX << "\n";
            //cout << "Current Z Pos " << mapPosZ + movMapPosZ << "\n";
            //cout << "Read location " << maze5[mapPosZ + movMapPosZ][mapPosX + movMapPosX] << "\n";

            movMapPosX = 0;
            movMapPosZ = 0;

            return false;
        }
        }
        else { return false;  }
    }
    catch (char *excp)
    {
        cout << *excp << "\n";

        movMapPosX = 0;
        movMapPosZ = 0;

        return true;
    }
}

void timer(int value) {
    if (ticksSince <= 2) 
    {
        allowInput = true;
        glutPostRedisplay();
    }
    else 
    {     
        ticksSince--;
        allowInput = false;
    }

    if (loadText) 
    {
        ticksSince_Txt++;
        //cout << "Current Txt Tick: " << ticksSince_Txt << "\n";
    }

    glutTimerFunc(refreshMills, timer, 0); 
}

void reshape(GLsizei width, GLsizei height) { 

    if (height == 0) 
    { 
        height = 1; 
    }

    GLfloat aspect = (GLfloat)winWidth / (GLfloat)winHeight;

    glViewport(0, 0, winWidth, winHeight);

    glMatrixMode(GL_PROJECTION);  
    glLoadIdentity();             

    gluPerspective(90.0f, aspect, 0.01f, 1000.0f);
}

void keyboard_func(unsigned char c, int x, int y)
{
    if (c == 'x' || c == 'X') // Close
    {
        glutDestroyWindow(glutGetWindow());
        exit(0);
    } 
    else if (c == 'p' || c == 'P') // Reload
    {
        reloadMaze = true;
        sceneManager(-2, -2);
        reloadMaze = false;
    }
    else if (c == 'm' || c == 'M') // Mute MEG
    {
        ticksSince_Txt = 50000;
    }
    else if ((c == 'a' || c == 'A') && allowInput)
    {
        ticksSince = tickAdjust;

        if (abs(angleCube) >= 315 || abs(angleCube) < 45)
        {
            movMapPosX++;

            if (checkCollision()) 
            {
                movXOffset += 0.5f;
            }

        }
        else if (abs(angleCube) >= 45 && abs(angleCube) < 135)
        {
            movMapPosZ++;

            if (checkCollision())
            {
                movZOffset += 0.5f;
            }
        }
        else if (abs(angleCube) >= 135 && abs(angleCube) < 225)
        {
            movMapPosX--;

            if (checkCollision())
            {
                movXOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 225 && abs(angleCube) < 315)
        {
            movMapPosZ--;

            if (checkCollision())
            {
                movZOffset -= 0.5f;
            }
        }
        allowInput = false;
    }
    else if ((c == 's' || c == 'S') && allowInput)
    {
        ticksSince = tickAdjust;

        if (abs(angleCube) >= 315 || abs(angleCube) < 45)
        {
            movMapPosZ--;

            if (checkCollision())
            {
                movZOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 45 && abs(angleCube) < 135)
        {
            movMapPosX++;

            if (checkCollision())
            {
                movXOffset += 0.5f;
            }
        }
        else if (abs(angleCube) >= 135 && abs(angleCube) < 225)
        {
            movMapPosZ++;

            if (checkCollision())
            {
                movZOffset += 0.5f;
            }
        }
        else if (abs(angleCube) >= 225 && abs(angleCube) < 315)
        {
            movMapPosX--;

            if (checkCollision())
            {
                movXOffset -= 0.5f;
            }
        }
        allowInput = false;
    }
    else if ((c == 'd' || c == 'D') && allowInput)
    {
        ticksSince = tickAdjust;

        if (abs(angleCube) >= 315 || abs(angleCube) < 45)
        {
            movMapPosX--;

            if (checkCollision())
            {
                movXOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 45 && abs(angleCube) < 135)
        {
            movMapPosZ--;

            if (checkCollision())
            {
                movZOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 135 && abs(angleCube) < 225)
        {
            movMapPosX++;

            if (checkCollision())
            {
                movXOffset += 0.5f;
            }
        }
        else if (abs(angleCube) >= 225 && abs(angleCube) < 315)
        {
            movMapPosZ++;

            if (checkCollision())
            {
                movZOffset += 0.5f;
            }
        }
        allowInput = false;
    }
    else if ((c == 'w' || c == 'W') && allowInput)
    {
        ticksSince = tickAdjust;

        if (abs(angleCube) >= 315 || abs(angleCube) < 45)
        {
            movMapPosZ++;

            if (checkCollision())
            {
                movZOffset += 0.5f;
            }
        }
        else if (abs(angleCube) >= 45 && abs(angleCube) < 135)
        {
            movMapPosX--;

            if (checkCollision())
            {
                movXOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 135 && abs(angleCube) < 225)
        {
            movMapPosZ--;

            if (checkCollision())
            {
                movZOffset -= 0.5f;
            }
        }
        else if (abs(angleCube) >= 225 && abs(angleCube) < 315)
        {
            movMapPosX++;

            if (checkCollision())
            {
                movXOffset += 0.5f;
            }
        }
        allowInput = false;
    }

    //cout << "X: " << mapPosX << "\n";
    //cout << "Z: " << mapPosZ << "\n";
    //cout << "X: " << movXOffset << "\n";
    //cout << "Z: " << movZOffset << "\n";
    //cout << "Angle: " << angleCube << "\n";
}

void spec_keyboard_func(int key, int x, int y) 
{
    switch (key) {
    case GLUT_KEY_LEFT: //Q
        if (allowInput) 
        {
            ticksSince = tickAdjust;

            if (abs(angleCube - 15.0f) <= 0 && abs(angleCube) != 0)
            {
                angleCube = 0.0f;
            }
            else
            {
                if (abs(angleCube) == 0)
                {
                    angleCube = 345.0f;
                }
                else
                {
                    angleCube -= 15.0f;
                }
            }

            if (compRot + 1 > 23) 
            {
                compRot = 0;
            }
            else 
            {
                compRot++;
            }
            allowInput = false;
        }
        break;
    case GLUT_KEY_RIGHT: //E
        if (allowInput)
        {
            ticksSince = tickAdjust;

            if (abs(angleCube) + 15.0f >= 345)
            {
                angleCube = 0.0f;
            }
            else
            {
                angleCube += 15.0f;
            }
         
            if ((compRot - 1) <= 1 && compRot != 0) 
            {
                compRot = 0;
            }
            else
            {
                if (compRot == 0) 
                {
                    compRot = 23;
                }
                else 
                {
                    compRot--;
                }
            }
            allowInput = false;
        }
        break;
    }

    //cout << "X: " << movXOffset << "\n";
    //cout << "Z: " << movZOffset << "\n";
    //cout << "Angle: " << angleCube << "\n";
    //cout << "Comp Angle: " << compRot << "\n";
    //cout << "Comp Angle Calc: " << (15 * compRot) << "\n";
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);            
    glutInitDisplayMode(GLUT_DOUBLE); 
    glutInitWindowSize(winWidth, winHeight);
    glutInitWindowPosition(50, 50);
    glutCreateWindow("The A-MAZE-ing Escape");
    sceneManager(-1, -1);
    glutDisplayFunc(display);       
    glutReshapeFunc(reshape);       
    init();                       
    glutTimerFunc(0, timer, 0);     
    glutKeyboardFunc(keyboard_func);
    glutSpecialFunc(spec_keyboard_func);
    glutMainLoop();                
}